{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#numpy안에 package가 또 따로 있음.\n",
    "#ex) A패키지 안에 있는 D패키지에 속해 있는 f함수를 불러올 때 \n",
    "#import numpy / numpy. A. D. f\n",
    "#from numpy import A. 의 형식도 가능"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt #바꿔쓰기: from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0],\n",
       "       [0, 0, 0]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.empty([2,3], dtype='int') #그렇게 중요한 함수는 아님 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 1., 1.],\n",
       "       [1., 1., 1.]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.zeros([2,3]) #중요: 2행 3열을 만드는데 해당값은 모두 0\n",
    "np.ones([2,3]) #data type은 기본적으로 float\n",
    "np.ones([2,3], dtype = 'float64') #소수자리 조정하기 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[0, 0, 0], [0, 0, 0]]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[[0,0,0],[0,0,0]] #계산이 안돼서 쓸 수가 없는 리스트"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0],\n",
       "       [0, 0, 0]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array([[0,0,0],[0,0,0]]) #위에 있는 리스트를 그대로 쓰고 np.array()를 붙이면 됨"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 2., 4., 6., 8.])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.arange(5) #중요: index가 5개 만들어짐 \n",
    "np.arange(0,10,2, dtype='float64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.,  2.,  4.,  6.,  8., 10.])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linspace(0, 10, 6) #중요: 숫자간 간격이 일정한 경우 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.array([[1,2,3],[4,5,6]]) #2차원: 대괄호가 2개 있기 때문에\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[1, 2, 3],\n",
       "        [4, 5, 6]],\n",
       "\n",
       "       [[1, 2, 3],\n",
       "        [4, 5, 6]]])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.array([[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]]]) #이와 같은 경우는 3차원\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.ndim #몇차원인지 알아볼 때 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 2, 3)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape #큰 괄호 속에 있는 것, 그 다음 괄호 속, 제일 작은 괄호 속"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[1., 2., 3.],\n",
       "        [4., 5., 6.]],\n",
       "\n",
       "       [[1., 2., 3.],\n",
       "        [4., 5., 6.]]])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.astype(np.float64) #type을 바꿔줄 때 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0, 0, 0],\n",
       "        [0, 0, 0]],\n",
       "\n",
       "       [[0, 0, 0],\n",
       "        [0, 0, 0]]])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.zeros_like(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0, 0, 0],\n",
       "        [0, 0, 0]],\n",
       "\n",
       "       [[0, 0, 0],\n",
       "        [0, 0, 0]]])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X*0 #계산하는 방법"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.1344477  -0.85087676 -1.58154586 -1.20696191  0.36320141  0.23017164\n",
      " -0.06847318 -0.98157243  1.27237898 -0.65508969  1.26460883 -0.15045752\n",
      " -0.65458992 -1.10707165  0.53003721  0.1292679  -0.21681731  2.97170611\n",
      " -0.91444596 -0.57150592 -0.88968881  2.39150474  0.10506624 -0.15423171\n",
      " -0.91773066  0.61134885  0.0148092  -1.94697758 -0.63390433  0.08614857\n",
      " -1.32178705  0.82453338 -0.11114698 -0.14229531 -0.06012074 -1.01052399\n",
      " -0.44848885  1.27472479  1.54855377  0.61785363  1.18121799  0.04000236\n",
      "  2.62252037 -0.39218137  0.97685059  0.46522634 -0.10314038  0.11146849\n",
      " -1.44016506 -0.55767253  0.79570386  0.72170055  0.43802145 -0.88855604\n",
      " -1.34596937  0.24505664  1.01253086  0.04929492  0.53064942 -0.5429362\n",
      "  0.93738139  1.24317624 -0.41369848  0.61049133 -0.97677118  1.06284132\n",
      " -1.31327799  0.65576873 -0.65645495 -0.90110762  0.41513112  0.7449126\n",
      "  0.32199744 -1.33839523  1.74809323 -1.68064822 -2.61457132  0.25680014\n",
      " -0.34864648 -1.72301616  1.28569441 -0.68166346  0.71468988  1.01927795\n",
      "  1.05224303 -0.50578486 -1.99006723  0.09552413  1.48955554  0.02225509\n",
      "  0.23030492  1.30722198 -1.04327192  1.33969514 -1.11901458  0.95288024\n",
      "  0.0204345  -0.44489848 -2.36016296  0.47653325]\n"
     ]
    }
   ],
   "source": [
    "data = np.random.normal(0,1,100) #normal: 정규분포를 만들어준다. -> (평균, 분산, n개의 데이터)를 random하게\n",
    "print(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.ndim #괄호가 하나밖에 없기 때문에"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100,)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape #총 100개"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data, bins=10) #bin은 막대(바구니)의 갯수 \n",
    "plt.show() #각 막대(바구니)의 빈도수를 모두 합하면 100개."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[1., 1., 1., 1.],\n",
       "        [1., 1., 1., 1.],\n",
       "        [1., 1., 1., 1.]],\n",
       "\n",
       "       [[1., 1., 1., 1.],\n",
       "        [1., 1., 1., 1.],\n",
       "        [1., 1., 1., 1.]]])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.ones([2, 3, 4])\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[1., 1.],\n",
       "        [1., 1.],\n",
       "        [1., 1.]],\n",
       "\n",
       "       [[1., 1.],\n",
       "        [1., 1.],\n",
       "        [1., 1.]],\n",
       "\n",
       "       [[1., 1.],\n",
       "        [1., 1.],\n",
       "        [1., 1.]],\n",
       "\n",
       "       [[1., 1.],\n",
       "        [1., 1.],\n",
       "        [1., 1.]]])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = X.reshape(-1, 3, 2) #-1은 알아서 해라 명령(4를 써도 같음)\n",
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(X.reshape(-1,3,2),Y) #바꾼 X랑 Y랑 형태가 비슷한가"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.random.randint(0,10,[2,3])\n",
    "b = np.random.random([2,3])\n",
    "np.savez(\"test\",a,b) #savez: 실제 파일로 저장해주는 함수, 유용하게 쓸 수 있음. a,b라는 variable을 저장해놓음."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-rw-r--r--  1 hyunmin  staff  562 10 31 14:48 test.npz\r\n"
     ]
    }
   ],
   "source": [
    "!ls -al test* #저장됐는지 확인해줌 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'a' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-67-d86fa4b07072>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mdel\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m \u001b[0;31m#메모리를 지울 경우 사용\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'who'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'a' is not defined"
     ]
    }
   ],
   "source": [
    "del a, b #메모리를 지울 경우 사용\n",
    "%who"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['arr_0', 'arr_1']"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "npzfiles = np.load(\"test.npz\")\n",
    "npzfiles.files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 7, 0],\n",
       "       [6, 2, 3]])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "npzfiles['arr_0'] #저장된 값을 불러오는 과정 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#delimiter: ,로 나누자 / 처음 x,y 써져있는 row는 생략해라 / 해당 함수 직접 해보기 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "arr = np.random.random([5,2,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n",
      "5\n",
      "(5, 2, 3)\n",
      "3\n",
      "30\n",
      "float64\n"
     ]
    }
   ],
   "source": [
    "print(type(arr))\n",
    "print(len(arr))\n",
    "print(arr.shape)\n",
    "print(arr.ndim)\n",
    "print(arr.size)\n",
    "print(arr.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.arange(1,5)\n",
    "b = np.arange(9,5,-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-8 -6 -4 -2]\n",
      "[ 9 16 21 24]\n"
     ]
    }
   ],
   "source": [
    "print(a - b)\n",
    "print(a * b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n",
      "[[9 8 7]\n",
      " [6 5 4]\n",
      " [3 2 1]]\n"
     ]
    }
   ],
   "source": [
    "a = np.arange(1,10).reshape(3,3)\n",
    "b = np.arange(9, 0, -1).reshape(3,3)\n",
    "print(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[False, False, False],\n",
       "       [False,  True, False],\n",
       "       [False, False, False]])"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a == b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[False, False, False],\n",
       "       [False, False,  True],\n",
       "       [ True,  True,  True]])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a > b #shape와 갯수가 똑같아야 비교 가능 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45, 45)"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.sum(), np.sum(a) #두 가지 모두 가능(numpy 선언 전제 하에), 쓰는 방법을 이해해야 됨"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([12, 15, 18]), array([12, 15, 18]))"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.sum(axis=0), np.sum(a, axis=0) #행의 관점에서 탑을 세운다. 위에서 아래로 뭉개는 식"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 6, 15, 24]), array([ 6, 15, 24]))"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.sum(axis=1), np.sum(a, axis=1) #열의 관점에서 합친다. 1자로 합쳐지는 식 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3,  4,  5,  6],\n",
       "       [ 7,  8,  9, 10, 11, 12],\n",
       "       [13, 14, 15, 16, 17, 18],\n",
       "       [19, 20, 21, 22, 23, 24]])"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.arange(1, 25).reshape(4, 6)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[101, 102, 103, 104, 105, 106],\n",
       "       [107, 108, 109, 110, 111, 112],\n",
       "       [113, 114, 115, 116, 117, 118],\n",
       "       [119, 120, 121, 122, 123, 124]])"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a + 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5])"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = np.arange(6)\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  3,  5,  7,  9, 11],\n",
       "       [ 7,  9, 11, 13, 15, 17],\n",
       "       [13, 15, 17, 19, 21, 23],\n",
       "       [19, 21, 23, 25, 27, 29]])"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a + b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#sampling weight: 44,100(CD음질) 이상은 구분이 어렵다. \n",
    "                  1초를 표현하는 숫자의 갯수를 의미한다.(hz와 함께 사용, /sec) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([( 3.3  , 1.7  ), ( 4.4  , 2.76 ), ( 5.5  , 2.09 ), ( 6.71 , 3.19 ),\n",
       "       ( 6.93 , 1.694), ( 4.168, 1.573), ( 9.779, 3.366), ( 6.182, 2.596),\n",
       "       ( 7.59 , 2.53 ), ( 2.167, 1.221), ( 7.042, 2.827), (10.791, 3.465),\n",
       "       ( 5.313, 1.65 ), ( 7.997, 2.904), ( 5.654, 2.42 ), ( 9.27 , 2.94 ),\n",
       "       ( 3.1  , 1.3  )], dtype=[('X', '<f4'), ('Y', '<f4')])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = np.loadtxt(\"regression.csv\", delimiter=\",\", skiprows=1, dtype={'names':(\"X\",\"Y\"), 'formats':('f', 'f')})\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-rw-r--r--  1 hyunmin  staff  850 10 31 17:09 regression_saved.csv\r\n"
     ]
    }
   ],
   "source": [
    "np.savetxt(\"regression_saved.csv\", data, delimiter=\",\")\n",
    "!ls -al regression_saved.csv"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
